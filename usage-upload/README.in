###############################################################################
#
# Deployment instructions for usage-upload-%VER%-%REL%
#
# Other versions and their instructions are available at:
#   https://software.xsede.org/development/usage-analysis/
#
###############################################################################
#
# Pre-requisites
#

 a) Any Python 2.7 or 3.x that includes Python virtualenv
    On CentOS/RedHat 7.x install these RPMs:
      python-2.7.5 and python-virtualenv
        OR
      python34-3.4.9 and python34-virtualenv

    Or use another Python that is in your path.

    Verify that that the first Python in your path is usable using these commands:
      python -c "import virtualenv"
        OR with Python 3.x
      python3 -c "import virtualenv"

 b) Usage files must contain log entries or pre-parsed XSEDE standard usage records,
    should be rotated daily or weekly, and must have names with a date "YYYYMMDD",
    for example:
       messages-20181201.log


###############################################################################
#
# Installation steps
#   Change the value of PREFIX in step 1) to install to an alternate directory
#

1) Define the install directory PREFIX before executing these instructions
  #  If using sh or bash
  $ export PREFIX=/usr/local/usage-upload

  #  If using csh or tcsh
  $ setenv PREFIX /usr/local/usage-upload

  $ mkdir $PREFIX

2) Install
  $ mkdir $PREFIX/source/
  $ cd $PREFIX/source/

  $ wget https://software.xsede.org/development/usage-analysis/usage-upload-%VER%-%REL%.tgz
  $ tar -xzf usage-upload-%VER%-%REL%.tgz
  $ cd usage-upload-%VER%-%REL%

  # Make sure the first Python in your environment satisfies the pre-requisites in a) above
  $ make install
  #   OR if using Python 3
  $ make PYTHON=python3 install

3) Generate an SSH key pair without a passpharse to be used to upload files
  # If you are upgrading you can use a previously generated SSH key pair
  $ ssh-keygen -t rsa -f $PREFIX/etc/id_rsa


###############################################################################
#
# The usage-upload software can be used to upload usage for multiple applications.
# Repeat the following steps settting <MYAPP> to a unique value for each application
# Make sure the PREFIX environment variable is defined as shows in 1) above
# Use the same ssh key pair to upload usage for all applications on a given server
#   

4) Request access to upload usage files to the Usage Collection Service (xci-usage.xsede.org)

   # E-mail help@xsede.org with the "Subject: XCI usage upload access" and this information:
   a. Attach the generated public key file id_rsa.pub, or past its contents in the e-mail body
   b. Include the name of the application <MYAPP> (i.e. cilogin, ssohub, ...) the usage data is from
   c. Include the hostname(s) you will be uploading usage data from

  # Usage Collection Service administrators will reply with instructions that include:
   d. The ssh remote username (REMOTE_USERNAME) to upload usage files to
   e. The ssh remote subdirectory (REMOTE_PATH) to oupload usage files to

5) Initialize an application upload process by providing a unique name for <MYAPP> below
  # First go to the source directory
  $ cd $PREFIX/source/usage-upload-%VER%-%REL%/
  $ make APP=<MYAPP> uploadapp
  #   OR to use Python 3
  $ make PYTHON=python3 APP=<MYAPP> uploadapp

6) Edit the $PREFIX/etc/upload_<MYAPP>.conf to set the following variables
   # If you are upgrading reference the saved previous configuration files
   LOCAL_DIRECTORY -> where the usage files are located
   LOCAL_GLOB -> the shell glob for finding rotated usage files to upload in LOCAL_DIRECTORY
   REMOTE_USERNAME -> the ssh remote username you received in step 4) above
   REMOTE_PATH -> the ssh remote subdirectory you received in step 4) above
       Usually "<MYAPP>/", for example "ssohob/"
   Optionally set LOG_PARSER if you have a parser that produces stardard usage records
       or rename "LOG_PARSER" to "LOG_PARSER_disabled" if you don't have a log parser
   Optionally set LOG_STDERR to "true" if you want error messsages also printed to STDERR

7) Test the new custom upload appplication
  $ $PREFIX/bin/upload_<MYAPP>.cron

8) Define the cron entry to run the upload automatically
  # Use appropriate values of <PREFIX> and <MYAPP>
  CRON: 10 6 * * 0 <PREFIX>/bin/upload_<MYAPP>.cron


###############################################################################
#
# Detailed usage-upload execution flow description
#
# This is background material and not part of the installation instructions
#

  1. Processing started by cron or interactive execution of
     bin/upload_<MYAPP>.cron
  2. Which executes bin/upload_usage.py with the the configuration file
     etc/upload_<MYAPP>.conf
  3. Which scans the selected LOCAL_DIRECTORY for files matching LOCAL_GLOB
  4. Selects files that haven't been uploaded or that changed since uploaded
  5. Parses/converts each file IF a parser was configured
  6. Uploads each file or parsed/converted file to the xci-usage server
     and REMOTE_USERNAME account and REMOTE_PATH subdirectory
  7. Tracks uploaded file status so that only new/changed files are uploaded in each run
     $PREFIX/etc/upload_<MYAPP>_status.json
